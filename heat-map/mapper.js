// Generated by CoffeeScript 1.3.1
var data, map;

map = function(_arg) {
  var PI, colorScale, coord, cos, data, el, extent, g, height, last, max, min, nodeDims, nodeHeight, nodeWidth, observer, parseDec, peek, points, random, randomInt, randomObserver, round, run, sin, squareDims, width, xMax, xScale, yMax, yScale;
  el = _arg.el, width = _arg.width, height = _arg.height, data = _arg.data, xMax = _arg.xMax, yMax = _arg.yMax;
  g = d3.select("body").append("svg").attr("width", width).attr("height", height);
  map = heatMap({
    width: xMax,
    height: yMax,
    levels: 2
  });
  extent = function(k) {
    return d3.extent(_.pluck(data, k));
  };
  colorScale = d3.scale.sqrt().domain([0, 0.5, 1]).range(["#0A88FF", "#00FF27", "#FF0000"]);
  nodeWidth = width / xMax;
  nodeHeight = height / yMax;
  nodeDims = Math.min(nodeWidth, nodeHeight);
  squareDims = Math.min(width, height);
  xScale = d3.scale.linear().domain([0, xMax]).range([0, squareDims - nodeDims]);
  yScale = d3.scale.linear().domain([0, yMax]).range([0, squareDims - nodeDims]);
  parseDec = function(x) {
    return parseInt(x, 10);
  };
  coord = function(x, y) {
    return x + y * 30;
  };
  g.on("click", function(d, i, e) {
    var all, coords, x, y, _ref;
    el = d3.event.target;
    coords = el.getAttribute("data-xy");
    _ref = /^(\d+),(\d+)/.exec(coords), all = _ref[0], x = _ref[1], y = _ref[2];
    return data.push({
      x: parseDec(x),
      y: parseDec(y)
    });
  });
  points = g.selectAll("rect");
  cos = Math.cos, sin = Math.sin, max = Math.max, min = Math.min, round = Math.round, random = Math.random, PI = Math.PI;
  randomInt = function(n) {
    return round(random() * n);
  };
  observer = d3.random.normal(PI / 2, 0.5);
  peek = function(x) {
    console.log(x);
    return x;
  };
  randomObserver = function() {
    var rads;
    rads = observer();
    console.log(rads);
    return peek({
      x: min(round(cos(rads) * 14) + 14, 29),
      y: min(round(sin(rads) * 8) + 2, 29)
    });
  };
  last = false;
  return setInterval(run = function() {
    var delta, n, time, _i, _ref;
    for (n = _i = 1, _ref = randomInt(2); _i <= _ref; n = _i += 1) {
      data.push(randomObserver());
    }
    time = new Date().getTime();
    last || (last = time);
    delta = time - last;
    points = points.data(map({
      delta: delta,
      nodes: data
    }), (function(d) {
      return d.x + "," + d.y;
    }));
    points.enter().append("rect").attr("transform", (function(d) {
      return "translate(" + (xScale(d.x)) + "," + (yScale(d.y)) + ")";
    })).attr("data-xy", function(d) {
      return d.x + "," + d.y + "-" + d.heat;
    }).attr("width", nodeDims).attr("height", nodeDims);
    points.attr("fill", function(d) {
      return colorScale(d.heat);
    });
    data = [];
    last = time;
    return false;
  });
};

map({
  width: document.body.clientWidth,
  height: document.body.clientHeight,
  xMax: 30,
  yMax: 30,
  data: data = []
});
